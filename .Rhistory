periods <- c(
"1981-2010",
"2041-2070/GFDL-ESM4/ssp585",
"2071-2100/GFDL-ESM4/ssp585"
)
# variable of interest
vars <- c(
paste0("bio", 1:19)
# "gdd5",
# "pet_penman_mean",
# "pet_penman_range",
# "npp"
)
clean_name <- function(x) {
return(
tolower(gsub("/", "_", x))
)
}
dir_base <- "data/CHELSA_data"
url_base <- "https://os.zhdk.cloud.switch.ch/envicloud/chelsa/chelsa_V2/GLOBAL/climatologies/%s/bio"
for (tp in periods) {
for (vr in vars) {
# get the full url for download
url_period <- sprintf(url_base, tp)
url_full <- sprintf("%s/CHELSA_%s_%s_V.2.1.tif", url_period, vr, clean_name(tp))
# NOTE: for download just use the parent dir; then delete original
dwn_name <- sprintf("%s/%s.tif", dir_base, vr)
# output dir base on the input period
out_dir <- file.path(dir_base, clean_name(tp))
if (!dir.exists(out_dir))
dir.create(out_dir, recursive = TRUE)
out_ca <- sprintf("%s/%s_%s.tif", out_dir, vr, "cat")
out_pl <- sprintf("%s/%s_%s.tif", out_dir, vr, "plant")
# do not download the file if already available
if (any(!file.exists(c(out_ca, out_pl)))) {
tryCatch(
{
download.file(url = url_full, destfile = dwn_name, method = "curl")
},
error = function(cond) {
message("Failed download: ", vr, " of ", tp)
next
}
)
}
# read and mask the data
if (file.exists(out_ca)) {
cat("The", vr, "for cat species exists!\n")
} else {
terra::crop(
x = terra::rast(dwn_name),
y = cat_ext,
filename = out_ca
)
}
if (file.exists(out_pl)) {
cat("The", vr, "for plant species exists!\n")
} else {
terra::crop(
x = terra::rast(dwn_name),
y = plant_ext,
filename = out_pl
)
}
# remove the main file
unlink(dwn_name)
print(dwn_name)
}
}
dwn_name
128*2
128*3
cat("\nNumber of tiles with non-na cells:", length(have_cell), "out of", num_tiles,  "\n")
have_cell <- 1:100
num_tiles <- 2000
cat("\nNumber of tiles with non-na cells:", length(have_cell), "out of", num_tiles,  "\n")
library(tidyverse)
library(terra)
# read models code
source("R/models.R")
extract_value <- function(r, x, drop_na = TRUE) {
vals <- cbind(
x,
terra::extract(r, x[, c("x", "y")], ID = FALSE)
)
return(
if (drop_na) {
tidyr::drop_na(vals)
} else {
vals
}
)
}
# get species data --------------------------------------------------------
occ_xy <- readRDS("data/species_data_zamia_polymorpha.rds") %>%
dplyr::select(longitude, latitude, value) %>%
setNames(c("x", "y", "occ"))
# get climate data --------------------------------------------------------
covar_rast <- terra::rast(
list.files("data/CHELSA_data/PCA/1981-2010/", pattern = "_plant.tif$", full.names = TRUE)
)
list.files("data/CHELSA_data/PCA/1981-2010/", pattern = "_plant.tif$", full.names = TRUE)
library(terra)
library(geodata)
world_map <- geodata::world(resolution = 4, path = "data")
species <- c("cat", "plant")[2]
periods <- c(
"1981-2010",
"2041-2070_gfdl-esm4_ssp585",
"2071-2100_gfdl-esm4_ssp585"
)[1]
species <- c("cat", "plant")[2]
periods <- c(
"1981-2010",
"2041-2070_gfdl-esm4_ssp585",
"2071-2100_gfdl-esm4_ssp585"
)[1]
covar_rast <- terra::rast(
list.files(
path = sprintf("data/CHELSA_data/%s", periods),
pattern = sprintf("_%s.tif$", species),
full.names = TRUE
)[1:19]
) %>%
terra::mask(world_map)
plot(covar_rast[["bio1"]])
plot(world_map, add = TRUE)
plot(covar_rast[["bio14"]])
plot(world_map, add = TRUE)
plot(covar_rast[["bio16"]])
plot(world_map, add = TRUE)
plot(covar_rast[["bio13"]])
plot(world_map, add = TRUE)
plot(covar_rast[["bio9"]])
plot(world_map, add = TRUE)
plot(covar_rast[["bio19"]])
plot(world_map, add = TRUE)
plot(covar_rast[["bio1"]])
plot(world_map, add = TRUE)
plot(covar_rast[["bio14"]])
plot(world_map, add = TRUE)
plot(covar_rast[["bio11"]])
plot(world_map, add = TRUE)
library(terra)
saveRDS()
library(geodata)
world_map <- geodata::world(resolution = 4, path = "data")
species_list <- c("cat", "plant")
periods <- c(
"1981-2010",
"2041-2070_gfdl-esm4_ssp585",
"2071-2100_gfdl-esm4_ssp585"
)
for (species in species_list) {
for (period in periods) {
cat("Species:", species, "for", period)
covar_rast <- terra::rast(
list.files(
path = sprintf("data/CHELSA_data/%s", period),
pattern = sprintf("_%s.tif$", species),
full.names = TRUE
)[1:19]
) %>%
terra::mask(world_map)
plot(covar_rast[["bio11"]])
plot(world_map, add = TRUE)
# add one to Aisa dataset to avoid log of zero
if (species == "cat") {
covar_rast[["bio14"]] <- covar_rast[["bio14"]] + 1
}
# log transform all the rainfall data
covar_rast[[paste0("bio", 12:19)]] <- log(covar_rast[[paste0("bio", 12:19)]])
# PCA model ---------------------------------------------------------------
if (period == "1981-2010") {
tm <- Sys.time()
set.seed(3010)
pca <- terra::prcomp(
x = covar_rast,
center = TRUE,
scale. = TRUE,
maxcell = 1e7
)
print(Sys.time() - tm)
saveRDS(pca, file = sprintf("data/CHELSA_data/PCA/%s_pca.rds", species))
pca_var <- pca$sdev^2 / sum(pca$sdev^2)
num_pcs <- seq_along(pca_var)
plot(
num_pcs,
pca_var,
type = "b",
xlab = "PC",
ylab = "Explained variance"
)
selected_pcs <- num_pcs[cumsum(pca_var) <= 0.995]
print(
cumsum(pca_var)
)
print(
selected_pcs
)
}
# PCA prediction (all times) ----------------------------------------------
pc_rast <- predict(covar_rast, pca, index = selected_pcs)
plot(pc_rast)
out_path <- paste0("data/CHELSA_data/PCA/", period)
if (!dir.exists(out_path)) {
dir.create(out_path, recursive = TRUE)
}
terra::writeRaster(
pc_rast,
filename = sprintf("%s/pc%s_%s.tif", out_path, selected_pcs, species)
)
}
}
# read models code
source("R/models.R")
sessionInfo()
library(disdat)
install.packages("disdat")
help(disdata)
help(disdat)
library(disdat)
help(disdat)
# filter coordinates based on cells
rm_duplicates <- fucntion(r, x, column) {
# filter coordinates based on cells
rm_duplicates <- fucntion(r, x, column) {
# filter coordinates based on cells
# NOTE: this function will change the order of the data
rm_duplicates <- fucntion(x, r, column = "occ") {
# filter coordinates based on cells
# NOTE: this function will change the order of the data
rm_duplicates <- function(x, r, column = "occ") {
# filter presences and background samples to remove duplicates separately
pr <- dplyr::filter(x, column == 1)
bg <- dplyr::filter(x, column == 0)
# find the duplicate points in a pixel
pr_dup <- duplicated(
terra::cellFromXY(r[[1]], pr[, c("x", "y")])
)
bg_dup <- duplicated(
terra::cellFromXY(r[[1]], bg[, c("x", "y")])
)
return(
rbind(
pr[!pr_dup, ],
bg[!bg_dup, ]
)
)
}
#
# get and clean species data ----------------------------------------------
occ_xy <- readRDS("data/species_data_zamia_polymorpha.rds") %>%
dplyr::select(longitude, latitude, value) %>%
setNames(c("x", "y", "occ"))
library(tidyverse)
library(terra)
# read models code
source("R/models.R")
# filter coordinates based on cells
# NOTE: this function will change the order of the data
rm_duplicates <- function(x, r, column = "occ") {
# filter presences and background samples to remove duplicates separately
pr <- dplyr::filter(x, column == 1)
bg <- dplyr::filter(x, column == 0)
# find the duplicate points in a pixel
pr_dup <- duplicated(
terra::cellFromXY(r[[1]], pr[, c("x", "y")])
)
bg_dup <- duplicated(
terra::cellFromXY(r[[1]], bg[, c("x", "y")])
)
return(
rbind(
pr[!pr_dup, ],
bg[!bg_dup, ]
)
)
}
# extract values and drop na
extract_value <- function(r, x, drop_na = TRUE) {
vals <- cbind(
x,
terra::extract(r, x[, c("x", "y")], ID = FALSE)
)
return(
if (drop_na) {
tidyr::drop_na(vals)
} else {
vals
}
)
}
#
# get and clean species data ----------------------------------------------
occ_xy <- readRDS("data/species_data_zamia_polymorpha.rds") %>%
dplyr::select(longitude, latitude, value) %>%
setNames(c("x", "y", "occ"))
occ_xy
x = occ_xy
#
# get climate data --------------------------------------------------------
covar_rast <- terra::rast(
list.files("data/CHELSA_data/PCA/1981-2010/", pattern = "_plant.tif$", full.names = TRUE)
)
plot(covar_rast[[1:4]])
# get and clean species data ----------------------------------------------
occ_xy <- readRDS("data/species_data_zamia_polymorpha.rds") %>%
dplyr::select(longitude, latitude, value) %>%
setNames(c("x", "y", "occ"))
r = covar_rast
r[[1]]
dplyr::filter(x, column == 1)
x
column
column = "occ"
dplyr::filter(x, column == 1)
dplyr::filter(x, column == 0)
dplyr::filter(x, !!rlang::sym(column) == 1)
dplyr::filter(x, !!rlang::sym(column) == 0)
# filter coordinates based on cells
# NOTE: this function will change the order of the data
rm_duplicates <- function(x, r, column = "occ") {
# filter presences and background samples to remove duplicates separately
pr <- dplyr::filter(x, !!rlang::sym(column) == 1)
bg <- dplyr::filter(x, !!rlang::sym(column) == 0)
# find the duplicate points in a pixel
pr_dup <- duplicated(
terra::cellFromXY(r[[1]], pr[, c("x", "y")])
)
bg_dup <- duplicated(
terra::cellFromXY(r[[1]], bg[, c("x", "y")])
)
return(
rbind(
pr[!pr_dup, ],
bg[!bg_dup, ]
)
)
}
# extract values and drop na
extract_value <- function(r, x, drop_na = TRUE) {
vals <- cbind(
x,
terra::extract(r, x[, c("x", "y")], ID = FALSE)
)
return(
if (drop_na) {
tidyr::drop_na(vals)
} else {
vals
}
)
}
rm_duplicates(occ_xy, covar_rast, column = "occ")
# filter presences and background samples to remove duplicates separately
pr <- dplyr::filter(x, !!rlang::sym(column) == 1)
bg <- dplyr::filter(x, !!rlang::sym(column) == 0)
terra::cellFromXY(r[[1]], pr[, c("x", "y")])
pr[, c("x", "y")]
# find the duplicate points in a pixel
pr_dup <- duplicated(
terra::cellFromXY(r[[1]], as.matrix(pr[, c("x", "y")]))
)
pr_dup
# filter coordinates based on cells
# NOTE: this function will change the order of the data
rm_duplicates <- function(x, r, column = "occ") {
# filter presences and background samples to remove duplicates separately
pr <- dplyr::filter(x, !!rlang::sym(column) == 1)
bg <- dplyr::filter(x, !!rlang::sym(column) == 0)
# find the duplicate points in a pixel
pr_dup <- duplicated(
terra::cellFromXY(r[[1]], as.matrix(pr[, c("x", "y")]))
)
bg_dup <- duplicated(
terra::cellFromXY(r[[1]], as.matrix(bg[, c("x", "y")]))
)
return(
rbind(
pr[!pr_dup, ],
bg[!bg_dup, ]
)
)
}
rm_duplicates(occ_xy, covar_rast, column = "occ")
!pr_dup
terra::cellFromXY(r[[1]], as.matrix(pr[, c("x", "y")]))
sum(c(!pr_dup, !bg_dup))
bg_dup <- duplicated(
terra::cellFromXY(r[[1]], as.matrix(bg[, c("x", "y")]))
)
sum(c(!pr_dup, !bg_dup))
cat("Number of duplicate removed:", sum(c(!pr_dup, !bg_dup)), "\n")
cat("WARNING: number of duplicate removed:", sum(c(!pr_dup, !bg_dup)), "\n")
warning("WARNING: number of duplicate removed:", sum(c(!pr_dup, !bg_dup)), "\n")
warning("Number of duplicate removed:", sum(c(!pr_dup, !bg_dup)), "\n")
# filter coordinates based on cells
# NOTE: this function will change the order of the data
rm_duplicates <- function(x, r, column = "occ") {
# filter presences and background samples to remove duplicates separately
pr <- dplyr::filter(x, !!rlang::sym(column) == 1)
bg <- dplyr::filter(x, !!rlang::sym(column) == 0)
# find the duplicate points in a pixel
pr_dup <- duplicated(
terra::cellFromXY(r[[1]], as.matrix(pr[, c("x", "y")]))
)
bg_dup <- duplicated(
terra::cellFromXY(r[[1]], as.matrix(bg[, c("x", "y")]))
)
warning("Number of duplicate records removed: ", sum(c(!pr_dup, !bg_dup)), "\n")
return(
rbind(
pr[!pr_dup, ],
bg[!bg_dup, ]
)
)
}
# get and clean species data ----------------------------------------------
occ_xy <- readRDS("data/species_data_zamia_polymorpha.rds") %>%
dplyr::select(longitude, latitude, value) %>%
setNames(c("x", "y", "occ")) %>%
rm_duplicates(r = covar_rast, column = "occ")
table(occ_xy$occ)
model_data <- extract_value(covar_rast, occ_xy)
head(model_data)
table(model_data$occ)
# spatial cv --------------------------------------------------------------
data_sf <- sf::st_as_sf(model_data, coords = c("x", "y"), crs = 4326)
set.seed(3010)
scv <- cv_spatial(
x = data_sf,
column = "occ",
r = covar_rast,
k = 5,
# size = 360000,
selection = "random",
progress = TRUE,
max_pixel = 2e6
)
library(blockCV)
library(sf)
set.seed(3010)
scv <- blockCV::cv_spatial(
x = data_sf,
column = "occ",
r = covar_rast,
k = 5,
# size = 360000,
selection = "random",
progress = TRUE,
max_pixel = 2e6
)
cv_spatial_autocor(x = data_sf, column = "occ")
blockCV::cv_spatial_autocor(r = covar_rast, x = data_sf, column = "occ")
blockCV::cv_spatial_autocor(r = covar_rast)
sac$range
scv <- blockCV::cv_spatial(
x = data_sf,
column = "occ",
r = covar_rast,
k = 5,
size = 210000,
selection = "random",
progress = TRUE,
max_pixel = 2e6
)
set.seed(3010)
scv <- blockCV::cv_spatial(
x = data_sf,
column = "occ",
r = covar_rast,
k = 5,
size = 210000,
selection = "random",
progress = TRUE,
max_pixel = 6e6
)
# final model fitting -----------------------------------------------------
# select only modelling columns
training_data <- dplyr::select(model_data, -x, -y) #%>%
str(training_data)
anyNA(training_data)
# fitting the with spatial CV model tuning
tm <- Sys.time()
model <- ensemble(
x = training_data,
y = "occ",
fold_ids = scv$folds_ids,
models = c("GLM", "GAM", "GBM", "RF")
)
Sys.time() - tm
print(model)
# predicting rasters ------------------------------------------------------
# predict to raster layers
tm <- Sys.time()
pred_current <- terra::predict(
object = covar_rast,
model = model,
type = "response",
cpkgs = c(
"ranger",
"dismo",
"gbm",
"mgcv",
"glmnet"
),
na.rm = TRUE
# filename = "outputs/pred_current.tif"
)
Sys.time() - tm
plot(pred_current)
