help(disdat)
# filter coordinates based on cells
rm_duplicates <- fucntion(r, x, column) {
# filter coordinates based on cells
rm_duplicates <- fucntion(r, x, column) {
# filter coordinates based on cells
# NOTE: this function will change the order of the data
rm_duplicates <- fucntion(x, r, column = "occ") {
# filter coordinates based on cells
# NOTE: this function will change the order of the data
rm_duplicates <- function(x, r, column = "occ") {
# filter presences and background samples to remove duplicates separately
pr <- dplyr::filter(x, column == 1)
bg <- dplyr::filter(x, column == 0)
# find the duplicate points in a pixel
pr_dup <- duplicated(
terra::cellFromXY(r[[1]], pr[, c("x", "y")])
)
bg_dup <- duplicated(
terra::cellFromXY(r[[1]], bg[, c("x", "y")])
)
return(
rbind(
pr[!pr_dup, ],
bg[!bg_dup, ]
)
)
}
#
# get and clean species data ----------------------------------------------
occ_xy <- readRDS("data/species_data_zamia_polymorpha.rds") %>%
dplyr::select(longitude, latitude, value) %>%
setNames(c("x", "y", "occ"))
library(tidyverse)
library(terra)
# read models code
source("R/models.R")
# filter coordinates based on cells
# NOTE: this function will change the order of the data
rm_duplicates <- function(x, r, column = "occ") {
# filter presences and background samples to remove duplicates separately
pr <- dplyr::filter(x, column == 1)
bg <- dplyr::filter(x, column == 0)
# find the duplicate points in a pixel
pr_dup <- duplicated(
terra::cellFromXY(r[[1]], pr[, c("x", "y")])
)
bg_dup <- duplicated(
terra::cellFromXY(r[[1]], bg[, c("x", "y")])
)
return(
rbind(
pr[!pr_dup, ],
bg[!bg_dup, ]
)
)
}
# extract values and drop na
extract_value <- function(r, x, drop_na = TRUE) {
vals <- cbind(
x,
terra::extract(r, x[, c("x", "y")], ID = FALSE)
)
return(
if (drop_na) {
tidyr::drop_na(vals)
} else {
vals
}
)
}
#
# get and clean species data ----------------------------------------------
occ_xy <- readRDS("data/species_data_zamia_polymorpha.rds") %>%
dplyr::select(longitude, latitude, value) %>%
setNames(c("x", "y", "occ"))
occ_xy
x = occ_xy
#
# get climate data --------------------------------------------------------
covar_rast <- terra::rast(
list.files("data/CHELSA_data/PCA/1981-2010/", pattern = "_plant.tif$", full.names = TRUE)
)
plot(covar_rast[[1:4]])
# get and clean species data ----------------------------------------------
occ_xy <- readRDS("data/species_data_zamia_polymorpha.rds") %>%
dplyr::select(longitude, latitude, value) %>%
setNames(c("x", "y", "occ"))
r = covar_rast
r[[1]]
dplyr::filter(x, column == 1)
x
column
column = "occ"
dplyr::filter(x, column == 1)
dplyr::filter(x, column == 0)
dplyr::filter(x, !!rlang::sym(column) == 1)
dplyr::filter(x, !!rlang::sym(column) == 0)
# filter coordinates based on cells
# NOTE: this function will change the order of the data
rm_duplicates <- function(x, r, column = "occ") {
# filter presences and background samples to remove duplicates separately
pr <- dplyr::filter(x, !!rlang::sym(column) == 1)
bg <- dplyr::filter(x, !!rlang::sym(column) == 0)
# find the duplicate points in a pixel
pr_dup <- duplicated(
terra::cellFromXY(r[[1]], pr[, c("x", "y")])
)
bg_dup <- duplicated(
terra::cellFromXY(r[[1]], bg[, c("x", "y")])
)
return(
rbind(
pr[!pr_dup, ],
bg[!bg_dup, ]
)
)
}
# extract values and drop na
extract_value <- function(r, x, drop_na = TRUE) {
vals <- cbind(
x,
terra::extract(r, x[, c("x", "y")], ID = FALSE)
)
return(
if (drop_na) {
tidyr::drop_na(vals)
} else {
vals
}
)
}
rm_duplicates(occ_xy, covar_rast, column = "occ")
# filter presences and background samples to remove duplicates separately
pr <- dplyr::filter(x, !!rlang::sym(column) == 1)
bg <- dplyr::filter(x, !!rlang::sym(column) == 0)
terra::cellFromXY(r[[1]], pr[, c("x", "y")])
pr[, c("x", "y")]
# find the duplicate points in a pixel
pr_dup <- duplicated(
terra::cellFromXY(r[[1]], as.matrix(pr[, c("x", "y")]))
)
pr_dup
# filter coordinates based on cells
# NOTE: this function will change the order of the data
rm_duplicates <- function(x, r, column = "occ") {
# filter presences and background samples to remove duplicates separately
pr <- dplyr::filter(x, !!rlang::sym(column) == 1)
bg <- dplyr::filter(x, !!rlang::sym(column) == 0)
# find the duplicate points in a pixel
pr_dup <- duplicated(
terra::cellFromXY(r[[1]], as.matrix(pr[, c("x", "y")]))
)
bg_dup <- duplicated(
terra::cellFromXY(r[[1]], as.matrix(bg[, c("x", "y")]))
)
return(
rbind(
pr[!pr_dup, ],
bg[!bg_dup, ]
)
)
}
rm_duplicates(occ_xy, covar_rast, column = "occ")
!pr_dup
terra::cellFromXY(r[[1]], as.matrix(pr[, c("x", "y")]))
sum(c(!pr_dup, !bg_dup))
bg_dup <- duplicated(
terra::cellFromXY(r[[1]], as.matrix(bg[, c("x", "y")]))
)
sum(c(!pr_dup, !bg_dup))
cat("Number of duplicate removed:", sum(c(!pr_dup, !bg_dup)), "\n")
cat("WARNING: number of duplicate removed:", sum(c(!pr_dup, !bg_dup)), "\n")
warning("WARNING: number of duplicate removed:", sum(c(!pr_dup, !bg_dup)), "\n")
warning("Number of duplicate removed:", sum(c(!pr_dup, !bg_dup)), "\n")
# filter coordinates based on cells
# NOTE: this function will change the order of the data
rm_duplicates <- function(x, r, column = "occ") {
# filter presences and background samples to remove duplicates separately
pr <- dplyr::filter(x, !!rlang::sym(column) == 1)
bg <- dplyr::filter(x, !!rlang::sym(column) == 0)
# find the duplicate points in a pixel
pr_dup <- duplicated(
terra::cellFromXY(r[[1]], as.matrix(pr[, c("x", "y")]))
)
bg_dup <- duplicated(
terra::cellFromXY(r[[1]], as.matrix(bg[, c("x", "y")]))
)
warning("Number of duplicate records removed: ", sum(c(!pr_dup, !bg_dup)), "\n")
return(
rbind(
pr[!pr_dup, ],
bg[!bg_dup, ]
)
)
}
# get and clean species data ----------------------------------------------
occ_xy <- readRDS("data/species_data_zamia_polymorpha.rds") %>%
dplyr::select(longitude, latitude, value) %>%
setNames(c("x", "y", "occ")) %>%
rm_duplicates(r = covar_rast, column = "occ")
table(occ_xy$occ)
model_data <- extract_value(covar_rast, occ_xy)
head(model_data)
table(model_data$occ)
# spatial cv --------------------------------------------------------------
data_sf <- sf::st_as_sf(model_data, coords = c("x", "y"), crs = 4326)
set.seed(3010)
scv <- cv_spatial(
x = data_sf,
column = "occ",
r = covar_rast,
k = 5,
# size = 360000,
selection = "random",
progress = TRUE,
max_pixel = 2e6
)
library(blockCV)
library(sf)
set.seed(3010)
scv <- blockCV::cv_spatial(
x = data_sf,
column = "occ",
r = covar_rast,
k = 5,
# size = 360000,
selection = "random",
progress = TRUE,
max_pixel = 2e6
)
cv_spatial_autocor(x = data_sf, column = "occ")
blockCV::cv_spatial_autocor(r = covar_rast, x = data_sf, column = "occ")
blockCV::cv_spatial_autocor(r = covar_rast)
sac$range
scv <- blockCV::cv_spatial(
x = data_sf,
column = "occ",
r = covar_rast,
k = 5,
size = 210000,
selection = "random",
progress = TRUE,
max_pixel = 2e6
)
set.seed(3010)
scv <- blockCV::cv_spatial(
x = data_sf,
column = "occ",
r = covar_rast,
k = 5,
size = 210000,
selection = "random",
progress = TRUE,
max_pixel = 6e6
)
# final model fitting -----------------------------------------------------
# select only modelling columns
training_data <- dplyr::select(model_data, -x, -y) #%>%
str(training_data)
anyNA(training_data)
# fitting the with spatial CV model tuning
tm <- Sys.time()
model <- ensemble(
x = training_data,
y = "occ",
fold_ids = scv$folds_ids,
models = c("GLM", "GAM", "GBM", "RF")
)
Sys.time() - tm
print(model)
# predicting rasters ------------------------------------------------------
# predict to raster layers
tm <- Sys.time()
pred_current <- terra::predict(
object = covar_rast,
model = model,
type = "response",
cpkgs = c(
"ranger",
"dismo",
"gbm",
"mgcv",
"glmnet"
),
na.rm = TRUE
# filename = "outputs/pred_current.tif"
)
Sys.time() - tm
plot(pred_current)
library(tidyverse)
library(terra)
library(blockCV)
library(sf)
# read models and other functions
source("R/models.R")
source("R/helper_functions.R")
#
# get climate data --------------------------------------------------------
world_map <- geodata::world(resolution = 4, path = "data")
covar_rast <- terra::rast(
list.files(
path = "data/CHELSA_data/PCA/1981-2010/",
pattern = "_cat.tif$",
full.names = TRUE
)
)
plot(covar_rast[[1]])
plot(world_map, add = TRUE)
# get and clean species data ----------------------------------------------
occ_xy <- readRDS("data/species_data_prionailurus_bengalensis.rds") %>%
dplyr::select(longitude, latitude, value) %>%
setNames(c("x", "y", "occ")) %>%
rm_duplicates(r = covar_rast, column = "occ")
table(occ_xy$occ)
points(occ_xy$x, occ_xy$y)
points(occ_xy$x[occ_xy$occ == 1], occ_xy$y[occ_xy$occ == 1], col = "red")
# extract values ----------------------------------------------------------
model_data <- extract_value(covar_rast, occ_xy, drop_na = TRUE)
# head(model_data)
table(model_data$occ)
#
# get climate data --------------------------------------------------------
world_map <- geodata::world(resolution = 4, path = "data")
the_ext <- terra::ext(c(-100, -65, 11, 24))
covar_rast <- terra::rast(
list.files(
path = "data/CHELSA_data/PCA/1981-2010/",
pattern = "_plant.tif$",
full.names = TRUE
)
) %>%
terra::crop(the_ext)
plot(covar_rast[[1]])
plot(world_map, add = TRUE)
# get and clean species data ----------------------------------------------
occ_xy <- readRDS("data/species_data_zamia_polymorpha.rds") %>%
dplyr::select(longitude, latitude, value) %>%
setNames(c("x", "y", "occ")) %>%
rm_duplicates(r = covar_rast, column = "occ")
table(occ_xy$occ)
# extract values ----------------------------------------------------------
model_data <- extract_value(covar_rast, occ_xy, drop_na = TRUE)
head(model_data)
table(model_data$occ)
covar_rast <- terra::rast(
list.files(
path = "data/CHELSA_data/PCA/1981-2010/",
pattern = "_cat.tif$",
full.names = TRUE
)
)
plot(covar_rast[[1]])
plot(world_map, add = TRUE)
# get and clean species data ----------------------------------------------
occ_xy <- readRDS("data/species_data_prionailurus_bengalensis.rds") %>%
dplyr::select(longitude, latitude, value) %>%
setNames(c("x", "y", "occ")) %>%
rm_duplicates(r = covar_rast, column = "occ")
table(occ_xy$occ)
points(occ_xy$x, occ_xy$y)
points(occ_xy$x[occ_xy$occ == 1], occ_xy$y[occ_xy$occ == 1], col = "red")
# extract values ----------------------------------------------------------
model_data <- extract_value(covar_rast, occ_xy, drop_na = TRUE)
# head(model_data)
table(model_data$occ)
# spatial cv --------------------------------------------------------------
data_sf <- sf::st_as_sf(model_data, coords = c("x", "y"), crs = 4326)
set.seed(3010)
scv <- blockCV::cv_spatial(
x = data_sf,
column = "occ",
r = covar_rast,
k = 5,
# size = 210000,
selection = "random",
progress = TRUE,
max_pixel = 3e6
)
# final model fitting -----------------------------------------------------
# select only modelling columns
training_data <- dplyr::select(model_data, -x, -y) #%>%
str(training_data)
anyNA(training_data)
# fitting the with spatial CV model tuning
tm <- Sys.time()
model <- ensemble(
x = training_data,
y = "occ",
fold_ids = scv$folds_ids,
models = c("GLM", "GAM", "GBM", "RF", "Maxent")
)
Sys.time() - tm
print(model)
# get and clean species data ----------------------------------------------
occ_xy <- readRDS("data/species_data_prionailurus_bengalensis.rds") %>%
dplyr::select(longitude, latitude, value) %>%
setNames(c("x", "y", "occ")) %>%
rm_duplicates(r = covar_rast, column = "occ")
table(occ_xy$occ)
points(occ_xy$x, occ_xy$y)
points(occ_xy$x[occ_xy$occ == 1], occ_xy$y[occ_xy$occ == 1], col = "red")
# extract values ----------------------------------------------------------
species_data <- extract_value(covar_rast, occ_xy, drop_na = TRUE)
# head(model_data)
table(species_data$occ)
# spatial cv --------------------------------------------------------------
data_sf <- sf::st_as_sf(species_data, coords = c("x", "y"), crs = 4326)
# model evaluation --------------------------------------------------------
# select only modelling columns
model_data <- dplyr::select(species_data, -x, -y) #%>%
str(model_data)
anyNA(model_data)
folds <- scv$folds_list
covar_rast <- terra::aggregate(covar_rast, fact = 10)
# predict to raster layers
tm <- Sys.time()
pred_current <- terra::predict(
object = covar_rast,
model = model,
type = "response",
cpkgs = c(
"ranger",
"dismo",
"gbm",
"mgcv",
"glmnet"
),
na.rm = TRUE,
filename = "outputs/cat/pred_current.tif"
)
# predict to raster layers
tm <- Sys.time()
pred_current <- terra::predict(
object = covar_rast,
model = model,
type = "response",
cpkgs = c(
"ranger",
"dismo",
"gbm",
"mgcv",
"glmnet"
),
na.rm = TRUE,
filename = "outputs/cat/pred_current.tif"
)
Sys.time() - tm
plot(pred_current)
covar_rast <- terra::rast(
list.files(
path = "data/CHELSA_data/1981-2010/",
pattern = "_cat.tif$",
full.names = TRUE
)
)
plot(covar_rast[[1]])
covar_rast <- terra::rast(
list.files(
path = "data/CHELSA_data/1981-2010/",
pattern = "_cat.tif$",
full.names = TRUE
)
) %>%
terra::subset(paste0("bio", c(1, 5, 12, 15))) %>%
terra::mask(world_map)
plot(covar_rast[[1]])
plot(world_map, add = TRUE)
plot(covar_rast[[1]])
plot(covar_rast)
# get and clean species data ----------------------------------------------
occ_xy <- readRDS("data/species_data_prionailurus_bengalensis.rds") %>%
dplyr::select(longitude, latitude, value) %>%
setNames(c("x", "y", "occ")) %>%
rm_duplicates(r = covar_rast, column = "occ")
table(occ_xy$occ)
points(occ_xy$x, occ_xy$y)
points(occ_xy$x[occ_xy$occ == 1], occ_xy$y[occ_xy$occ == 1], col = "red")
# extract values ----------------------------------------------------------
species_data <- extract_value(covar_rast, occ_xy, drop_na = TRUE)
# head(model_data)
table(species_data$occ)
# spatial cv --------------------------------------------------------------
data_sf <- sf::st_as_sf(species_data, coords = c("x", "y"), crs = 4326)
set.seed(3010)
scv <- blockCV::cv_spatial(
x = data_sf,
column = "occ",
r = covar_rast,
k = 5,
# size = 210000,
selection = "random",
progress = TRUE,
max_pixel = 3e6
)
# fitting the with spatial CV model tuning
tm <- Sys.time()
model <- ensemble(
x = model_data,
y = "occ",
fold_ids = scv$folds_ids,
models = c("GLM", "GAM", "GBM", "RF", "Maxent")
)
blockCV::cv_similarity(scv, data_sf, covar_rast)
covar_rast <- terra::rast(
list.files(
path = "data/CHELSA_data/PCA/1981-2010/",
pattern = "_cat.tif$",
full.names = TRUE
)
)
blockCV::cv_similarity(scv, data_sf, covar_rast)
